--- a/src/chinadns.c
+++ b/src/chinadns.c
@@ -97,10 +97,6 @@ static const char *default_listen_port =
 static char *listen_addr = NULL;
 static char *listen_port = NULL;
 
-static char *ip_list_file = NULL;
-static ip_list_t ip_list;
-static int parse_ip_list();
-
 #define NETMASK_MIN 0
 static char *chnroute_file = NULL;
 static net_list_t chnroute_list;
@@ -184,8 +180,6 @@ int main(int argc, char **argv) {
   memset(&id_addr_queue, 0, sizeof(id_addr_queue));
   if (0 != parse_args(argc, argv))
     return EXIT_FAILURE;
-  if (0 != parse_ip_list())
-    return EXIT_FAILURE;
   if (0 != parse_chnroute())
     return EXIT_FAILURE;
   if (0 != resolve_dns_servers())
@@ -246,7 +240,7 @@ static int setnonblock(int sock) {
 
 static int parse_args(int argc, char **argv) {
   int ch;
-  while ((ch = getopt(argc, argv, "hb:p:s:l:c:y:dmvV")) != -1) {
+  while ((ch = getopt(argc, argv, "hb:p:s:c:y:dmvV")) != -1) {
     switch (ch) {
       case 'h':
         usage();
@@ -263,9 +257,6 @@ static int parse_args(int argc, char **a
       case 'c':
         chnroute_file = strdup(optarg);
         break;
-      case 'l':
-        ip_list_file = strdup(optarg);
-        break;
       case 'y':
         empty_result_delay = atof(optarg);
         break;
@@ -428,48 +419,6 @@ static int test_dns_server_type(struct s
   }
 }
 
-static int parse_ip_list() {
-  FILE *fp;
-  char line_buf[32];
-  char *line = NULL;
-  size_t len = sizeof(line_buf);
-  ssize_t read;
-  ip_list.entries = 0;
-  int i = 0;
-
-  if (ip_list_file == NULL)
-    return 0;
-
-  fp = fopen(ip_list_file, "rb");
-  if (fp == NULL) {
-    ERR("fopen");
-    VERR("Can't open ip list: %s\n", ip_list_file);
-    return -1;
-  }
-  while ((line = fgets(line_buf, len, fp))) {
-    ip_list.entries++;
-  }
-
-  ip_list.ips = calloc(ip_list.entries, sizeof(struct in_addr));
-  if (0 != fseek(fp, 0, SEEK_SET)) {
-    VERR("fseek");
-    return -1;
-  }
-  while ((line = fgets(line_buf, len, fp))) {
-    char *sp_pos;
-    sp_pos = strchr(line, '\r');
-    if (sp_pos) *sp_pos = 0;
-    sp_pos = strchr(line, '\n');
-    if (sp_pos) *sp_pos = 0;
-    inet_aton(line, &ip_list.ips[i]);
-    i++;
-  }
-
-  qsort(ip_list.ips, ip_list.entries, sizeof(struct in_addr), cmp_in_addr);
-  fclose(fp);
-  return 0;
-}
-
 static int cmp_net_mask(const void *a, const void *b) {
   net_mask_t *neta = (net_mask_t *)a;
   net_mask_t *netb = (net_mask_t *)b;
@@ -825,13 +774,6 @@ static int should_filter_query(ns_msg ms
     if (type == ns_t_a) {
       if (verbose)
         printf("%s, ", inet_ntoa(*(struct in_addr *)rd));
-      if (!compression && !has_trusted_dns) {
-        r = bsearch(rd, ip_list.ips, ip_list.entries, sizeof(struct in_addr),
-                    cmp_in_addr);
-        if (r) {
-          return 1;
-        }
-      }
       if (test_ip_in_list(*(struct in_addr *)rd, &chnroute_list)) {
         // result is chn
         if (dns_is_foreign) {
@@ -934,11 +876,10 @@ static void free_delay(int pos) {
 
 static void usage() {
   printf("%s\n", "\
-usage: chinadns [-h] [-l IPLIST_FILE] [-b BIND_ADDR] [-p BIND_PORT]\n\
+usage: chinadns [-h] [-b BIND_ADDR] [-p BIND_PORT]\n\
        [-c CHNROUTE_FILE] [-s DNS] [-m] [-v] [-V]\n\
 Forward DNS requests.\n\
 \n\
-  -l IPLIST_FILE        path to ip blacklist file\n\
   -c CHNROUTE_FILE      path to china route file\n\
                         if not specified, CHNRoute will be turned\n\
   -d                    off enable bi-directional CHNRoute filter\n\
@@ -948,7 +889,7 @@ Forward DNS requests.\n\
   -s DNS                DNS servers to use, default:\n\
                         114.114.114.114,208.67.222.222:443,8.8.8.8\n\
   -m                    use DNS compression pointer mutation\n\
-                        (backlist and delaying would be disabled)\n\
+                        (blacklist and delaying would be disabled)\n\
   -v                    verbose logging\n\
   -h                    show this help message and exit\n\
   -V                    print version and exit\n\
